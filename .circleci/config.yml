
version: 2
jobs:

  prep-repo:
    working_directory: /app
    # The primary container is an instance of the first list image listed.
    # Your commands in context of this container.
    docker:
      - image: lakruzz/play:latest
        environment:
          PLAY_USER_NAME:    Circle CI by @sygdrome
          PLAY_USER_EMAIL:   sygdrom@hotmail.com
    steps:
      - checkout
      - run:
          name: Describe the Environment
          command: |
            git --version
            env | sort | grep "CIRCLE"
            pwd
            ls -a
            git rev-parse --short HEAD
      - run:
          name: If triggered by a tag, make sure it's annotated.
          command: '[[ -z "$CIRCLE_TAG" ]] && echo "Not triggered by a tag" || git cat-file -p `git rev-parse $CIRCLE_TAG` | grep "^tag $CIRCLE_TAG$"'

      - run:
          name: Introduce the user to the git repo, to prepare for delivery
          command: play --manuscript .circleci/play-proflow-cci-gh.yml --part git_set_user
      - run:
          name: If we're on a ready branch then integrate
          command: |
            export IS_READY=`printenv CIRCLE_BRANCH | grep -e "ready\/*" && echo TRUE || echo ""`
            printenv IS_READY
            [[ -z "$IS_READY" ]] && echo Not a ready branch || play --manuscript .circleci/play-proflow-cci-gh.yml --part integrate
      - run:
          name: Create version.txt
          command: play --manuscript .circleci/play-proflow-cci-gh.yml --part write-version-to-file
      - save_cache:
          key: the-repo-{{ .Revision }}
          paths:
            - .

  jekyll-build:
    working_directory: /app
    docker:
      - image: carolineolivia94/jekyll-plus-plus
    steps:
      - restore_cache:
          keys:
            - the-repo-{{ .Revision }}
      - run:
          name:  Build "stage" or "production".
          command: |
            [[ -z "$CIRCLE_TAG" ]] && export JEKYLL_ENV=stage || export JEKYLL_ENV=production
            export JEKYLL_PARAMS=`printenv CIRCLE_BRANCH | grep -e "^master$" && echo "--config _config.yml,_stage_config.yml" || echo ""`
            printenv JEKYLL_PARAMS
            printenv JEKYLL_ENV
            jekyll build $JEKYLL_PARAMS
      - run:
          name: Log the version
          command: cp version.txt _site/version.txt
      - save_cache:
          key: the-built-repo-{{ .Revision }}{{ .BuildNum }}
          paths:
            - _site
            - .circleci

  html-proofer:
    working_directory: /app
    docker:
      - image: 18fgsa/html-proofer
    steps:
      - restore_cache:
          keys:
            - the-built-repo-
      - run:
          name: Htmlproofer
          command: htmlproofer --allow-hash-href  --enforce-https  --check-favicon --check-opengraph --report-missing-names --report-invalid-tags --disable_external -- _site

  deliver:
    working_directory: /app
    docker:
      - image: lakruzz/play:latest
    steps:
      - restore_cache:
          keys:
            - the-repo-
      - run:
          name: Deliver
          command: play --manuscript .circleci/play-proflow-cci-gh.yml --part deliver

  stage-deploy:
    working_directory: /app/_site
    docker:
      - image: lakruzz/play:latest
        environment:
          PLAY_TARGET_GH_REPO:   sygdrome/stage.tenzion.dk
          PLAY_USER_NAME:        Circle CI by @sygdrome
          PLAY_USER_EMAIL:       sygdrome@hotmail.com
    steps:
      - restore_cache:
          keys:
            - the-built-repo-
      - run:
          name: Use CNAME.stage if it exist
          command: '[[ -e CNAME.stage ]] && cp -f CNAME.stage CNAME || echo No CNAME.stage file found'
      - run:
          name: Deploy to GitHub Pages
          command: play --manuscript ../.circleci/play-proflow-cci-gh.yml --part ghpages_deploy

  prod-deploy:
   working_directory: /app/_site
   docker:
     - image: lakruzz/play:latest
       environment:
          PLAY_TARGET_GH_REPO:   sygdrome/www.tenzion.dk
          PLAY_USER_NAME:        Circle CI by @sygdrome
          PLAY_USER_EMAIL:       sygdrome@hotmail.com
   steps:
     - restore_cache:
         keys:
           - the-built-repo-
     - run:
         name: Deploy to GitHub Pages
         command: play --manuscript ../.circleci/play-proflow-cci-gh.yml --part ghpages_deploy

workflows:
  version: 2
  Proflow:
    jobs:
      - prep-repo:
          filters:
            tags:
              only: /.*/
            branches:
              only: /.*/
      - jekyll-build:
          requires: # Create the thing to deploy
            - prep-repo
          filters:
            tags:
              only: /.*/
            branches:
              only: /.*/
      - html-proofer: # Verify that the thing to deploy is good
          requires:
            - prep-repo
            - jekyll-build
          filters:
            tags:
              only: /.*/
            branches:
              only: /.*/
      - deliver: # Push the target branch to remote - only when all is good and only on ready branches
          requires:
            - prep-repo
            - jekyll-build
            - html-proofer
          filters:
            branches:
              only:
                - /ready\/.*/
      - stage-deploy:
          requires:
            - prep-repo
            - jekyll-build
            - html-proofer
          filters:
            branches:
              only:
                - /master/
      - prod-deploy:
          requires:
            - prep-repo
            - jekyll-build
            - html-proofer
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^\d+\.\d+\.\d+$/ # Semantic version number
